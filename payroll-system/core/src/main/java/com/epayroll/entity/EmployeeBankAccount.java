package com.epayroll.entity;

// Generated Dec 22, 2012 3:36:44 AM by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.math.BigDecimal;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * EmployeeBankAccount generated by hbm2java
 */
@Entity
@Table(name = "employee_bank_account")
@org.hibernate.annotations.Entity(dynamicInsert = true, dynamicUpdate = true)
public class EmployeeBankAccount implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 7414646448457706255L;
	private Long id;
	private Employee employee;
	private DepositValueType depositValueType;
	private AccountType accountType;
	private String routingNumber;
	private String accountNumber;
	private String bankName;
	private BigDecimal depositValue;

	public enum DepositValueType {
		PERCENTAGE("Percentage"), AMOUNT("Amount");
		private String name;

		private DepositValueType(String name) {
			this.name = name;
		}

		public String getName() {
			return name;
		}
	}

	public enum AccountType {
		SAVING("Saving"), CHECKING("Checking");
		private String name;

		private AccountType(String name) {
			this.name = name;
		}

		public String getName() {
			return name;
		}
	}

	public EmployeeBankAccount() {
	}

	public EmployeeBankAccount(Employee employee, DepositValueType depositValueType,
			AccountType accountType, String routingNumber, String accountNumber, String bankName) {
		this.employee = employee;
		this.depositValueType = depositValueType;
		this.accountType = accountType;
		this.routingNumber = routingNumber;
		this.accountNumber = accountNumber;
		this.bankName = bankName;
	}

	public EmployeeBankAccount(Employee employee, DepositValueType depositValueType,
			AccountType accountType, String routingNumber, String accountNumber, String bankName,
			BigDecimal depositValue) {
		super();
		this.employee = employee;
		this.depositValueType = depositValueType;
		this.accountType = accountType;
		this.routingNumber = routingNumber;
		this.accountNumber = accountNumber;
		this.bankName = bankName;
		this.depositValue = depositValue;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "employee_id")
	public Employee getEmployee() {
		return this.employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	@Column(name = "account_type", length = 45)
	public AccountType getAccountType() {
		return this.accountType;
	}

	public void setAccountType(AccountType accountType) {
		this.accountType = accountType;
	}

	@Column(name = "deposit_value_type")
	public DepositValueType getDepositValueType() {
		return depositValueType;
	}

	public void setDepositValueType(DepositValueType depositValueType) {
		this.depositValueType = depositValueType;
	}

	@Column(name = "routing_number", length = 45)
	public String getRoutingNumber() {
		return this.routingNumber;
	}

	public void setRoutingNumber(String routingNumber) {
		this.routingNumber = routingNumber;
	}

	@Column(name = "account_number", length = 45)
	public String getAccountNumber() {
		return this.accountNumber;
	}

	public void setAccountNumber(String accountNumber) {
		this.accountNumber = accountNumber;
	}

	@Column(name = "bank_name", length = 45)
	public String getBankName() {
		return this.bankName;
	}

	public void setBankName(String bankName) {
		this.bankName = bankName;
	}

	@Column(name = "deposit_value", precision = 10, scale = 2)
	public BigDecimal getDepositValue() {
		return depositValue;
	}

	public void setDepositValue(BigDecimal depositValue) {
		this.depositValue = depositValue;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("EmployeeBankAccount [id=");
		builder.append(id);
		builder.append(", employee=");
		builder.append(employee.getId());
		builder.append(", depositValueType=");
		builder.append(depositValueType);
		builder.append(", accountType=");
		builder.append(accountType);
		builder.append(", routingNumber=");
		builder.append(routingNumber);
		builder.append(", accountNumber=");
		builder.append(accountNumber);
		builder.append(", bankName=");
		builder.append(bankName);
		builder.append(", depositValue=");
		builder.append(depositValue);
		builder.append("]");
		return builder.toString();
	}

}
