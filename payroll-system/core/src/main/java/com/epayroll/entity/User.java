package com.epayroll.entity;

// Generated Dec 12, 2012 9:09:02 PM by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user")
@org.hibernate.annotations.Entity(dynamicInsert = true, dynamicUpdate = true)
public class User implements java.io.Serializable {

	private static final long serialVersionUID = 4188882339191244327L;

	public enum Status {
		ACTIVE("Active"), INACTIVE("InActive");
		private String name;

		private Status(String name) {
			this.name = name;
		}

		public String getName() {
			return name;
		}
	}

	private Long id;
	private Person person;
	private Role role;
	private Address address;
	private String userName;
	private String password;
	private String securityPin;
	private Status status;
	private Boolean forgetProcessInitiated;
	private Boolean pinVerified = false;
	private Set<UserOtp> userOtps = new HashSet<UserOtp>(0);
	private Set<UserSecurityQuestion> userSecurityQuestions = new HashSet<UserSecurityQuestion>(0);
	private Set<SystemMessageUserMap> systemMessageUserMaps = new TreeSet<SystemMessageUserMap>();
	private Set<SystemTaskUserMap> systemTaskUserMaps = new TreeSet<SystemTaskUserMap>();
	private Set<CompanyUser> companyUsers = new HashSet<CompanyUser>(0);
	private Set<AdminUser> adminUsers = new HashSet<AdminUser>(0);

	public User() {
	}

	public User(Person person, Role role, Address address, String userName, String password,
			String securityPin) {
		this.person = person;
		this.role = role;
		this.address = address;
		this.userName = userName;
		this.password = password;
		this.securityPin = securityPin;
	}

	public User(Person person, Role role, Address address, String userName, String password,
			String securityPin, Status status, Boolean pinVerified, Boolean forgetProcessInitiated,
			Set<UserOtp> userOtps, Set<UserSecurityQuestion> userSecurityQuestions,
			Set<SystemMessageUserMap> systemMessageUserMaps,
			Set<SystemTaskUserMap> systemTaskUserMaps, Set<CompanyUser> companyUsers,
			Set<AdminUser> adminUsers) {
		this.person = person;
		this.role = role;
		this.address = address;
		this.userName = userName;
		this.password = password;
		this.securityPin = securityPin;
		this.status = status;
		this.forgetProcessInitiated = forgetProcessInitiated;
		this.setPinVerified(pinVerified);
		this.userOtps = userOtps;
		this.userSecurityQuestions = userSecurityQuestions;
		this.systemMessageUserMaps = systemMessageUserMaps;
		this.systemTaskUserMaps = systemTaskUserMaps;
		this.companyUsers = companyUsers;
		this.setAdminUsers(adminUsers);
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = "person_id")
	public Person getPerson() {
		return this.person;
	}

	public void setPerson(Person person) {
		this.person = person;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "role_id")
	public Role getRole() {
		return this.role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = "address_id", nullable = true)
	public Address getAddress() {
		return this.address;
	}

	public void setAddress(Address address) {
		this.address = address;
	}

	@Column(name = "password", length = 45)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "security_pin", nullable = true, length = 10)
	public String getSecurityPin() {
		return this.securityPin;
	}

	public void setSecurityPin(String securityPin) {
		this.securityPin = securityPin;
	}

	@Column(name = "status", length = 20)
	public Status getStatus() {
		return this.status;
	}

	public void setStatus(Status status) {
		this.status = status;
	}

	@Column(name = "user_name", length = 45)
	public String getUserName() {
		return this.userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	@Column(name = "pin_verified")
	public Boolean getPinVerified() {
		return pinVerified;
	}

	public void setPinVerified(Boolean pinVerified) {
		this.pinVerified = pinVerified;
	}

	@Column(name = "forget_process_initiated")
	public Boolean getForgetProcessInitiated() {
		return forgetProcessInitiated;
	}

	public void setForgetProcessInitiated(Boolean forgetProcessInitiated) {
		this.forgetProcessInitiated = forgetProcessInitiated;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserOtp> getUserOtps() {
		return this.userOtps;
	}

	public void setUserOtps(Set<UserOtp> userOtps) {
		this.userOtps = userOtps;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserSecurityQuestion> getUserSecurityQuestions() {
		return this.userSecurityQuestions;
	}

	public void setUserSecurityQuestions(Set<UserSecurityQuestion> userSecurityQuestions) {
		this.userSecurityQuestions = userSecurityQuestions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<SystemMessageUserMap> getSystemUserMessageMaps() {
		return systemMessageUserMaps;
	}

	public void setSystemUserMessageMaps(Set<SystemMessageUserMap> systemMessageUserMaps) {
		this.systemMessageUserMaps = systemMessageUserMaps;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<SystemTaskUserMap> getSystemTaskUserMaps() {
		return systemTaskUserMaps;
	}

	public void setSystemTaskUserMaps(Set<SystemTaskUserMap> systemTaskUserMaps) {
		this.systemTaskUserMaps = systemTaskUserMaps;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<CompanyUser> getCompanyUsers() {
		return companyUsers;
	}

	public void setCompanyUsers(Set<CompanyUser> companyUsers) {
		this.companyUsers = companyUsers;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<AdminUser> getAdminUsers() {
		return adminUsers;
	}

	public void setAdminUsers(Set<AdminUser> adminUsers) {
		this.adminUsers = adminUsers;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("User [id=");
		builder.append(id);
		builder.append(", person=");
		builder.append(person);
		builder.append(", role=");
		builder.append(role.getId());
		builder.append(", address=");
		builder.append(address.getId());
		builder.append(", userName=");
		builder.append(userName);
		builder.append(", password=");
		builder.append(password);
		builder.append(", securityPin=");
		builder.append(securityPin);
		builder.append(", status=");
		builder.append(status);
		builder.append(", pinVerified=");
		builder.append(pinVerified);
		builder.append(", forgetProcessInitiated=");
		builder.append(forgetProcessInitiated);
		builder.append("]");
		return builder.toString();
	}

}
