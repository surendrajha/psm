package com.epayroll.entity;

// Generated Dec 12, 2012 9:09:02 PM by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.codehaus.jackson.annotate.JsonBackReference;
import org.codehaus.jackson.annotate.JsonIgnoreProperties;

import com.epayroll.entity.EmployeeDeduction.DeductionType;

/**
 * CompanyDeduction generated by hbm2java
 */
@Entity
@Table(name = "company_deduction")
@org.hibernate.annotations.Entity(dynamicInsert = true, dynamicUpdate = true)
@JsonIgnoreProperties({ "company", "typedeductionCaps", "employeeDeductions",
		"companyWorkerCompensations", "companyPayrollDeductions" })
public class CompanyDeduction implements java.io.Serializable {

	/**
	 */
	private static final long serialVersionUID = -7024900284205097602L;
	private Long id;
	private Company company;
	private Deduction deduction;
	private String displayName;
	private DeductionType deductionType;
	private boolean employerMatchApplicable;
	private BigDecimal employerFirstMatchValue;
	private BigDecimal employeeFirstValue;
	private BigDecimal employerNextMatchValue;
	private BigDecimal employeeNextValue;
	private BigDecimal employerMatchLimit;
	private Set<DeductionCap> typedeductionCaps = new HashSet<DeductionCap>(0);
	private Set<EmployeeDeduction> employeeDeductions = new HashSet<EmployeeDeduction>(0);
	private Set<CompanyPayrollDeduction> companyPayrollDeductions = new HashSet<CompanyPayrollDeduction>(
			0);

	public CompanyDeduction() {
	}

	public CompanyDeduction(Company company, Deduction deduction) {
		this.company = company;
		this.deduction = deduction;
	}

	public CompanyDeduction(Company company, Deduction deduction, String displayName,
			DeductionType deductionType, boolean employerMatchApplicable,
			BigDecimal employerFirstMatchValue, BigDecimal employeeFirstValue,
			BigDecimal employerNextMatchValue, BigDecimal employeeNextValue,
			BigDecimal employerMatchLimit, Set<DeductionCap> typedeductionCaps,
			Set<EmployeeDeduction> employeeDeductions,
			Set<CompanyPayrollDeduction> companyPayrollDeductions) {
		this.company = company;
		this.deduction = deduction;
		this.displayName = displayName;
		this.typedeductionCaps = typedeductionCaps;
		this.employeeDeductions = employeeDeductions;
		this.companyPayrollDeductions = companyPayrollDeductions;
		this.deductionType = deductionType;
		this.employerMatchApplicable = employerMatchApplicable;
		this.employerFirstMatchValue = employerFirstMatchValue;
		this.employeeFirstValue = employeeFirstValue;
		this.employerNextMatchValue = employerNextMatchValue;
		this.employeeNextValue = employerFirstMatchValue;
		this.employerMatchLimit = employerMatchLimit;

	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "company_id")
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@JsonBackReference("deduction-companyDeduction")
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "deduction_id")
	public Deduction getDeduction() {
		return this.deduction;
	}

	public void setDeduction(Deduction deduction) {
		this.deduction = deduction;
	}

	@Column(name = "display_name", length = 45)
	public String getDisplayName() {
		return this.displayName;
	}

	public void setDisplayName(String displayName) {
		this.displayName = displayName;
	}

	@Column(name = "deduction_type")
	public DeductionType getDeductionType() {
		return deductionType;
	}

	public void setDeductionType(DeductionType deductionType) {
		this.deductionType = deductionType;
	}

	@Column(name = "employer_match_applicable")
	public boolean isEmployerMatchApplicable() {
		return employerMatchApplicable;
	}

	public void setEmployerMatchApplicable(boolean employerMatchApplicable) {
		this.employerMatchApplicable = employerMatchApplicable;
	}

	@Column(name = "employer_first_match_value", precision = 10, scale = 2)
	public BigDecimal getEmployerFirstMatchValue() {
		return employerFirstMatchValue;
	}

	public void setEmployerFirstMatchValue(BigDecimal employerFirstMatchValue) {
		this.employerFirstMatchValue = employerFirstMatchValue;
	}

	@Column(name = "employee_first_value", precision = 10, scale = 2)
	public BigDecimal getEmployeeFirstValue() {
		return employeeFirstValue;
	}

	public void setEmployeeFirstValue(BigDecimal employeeFirstValue) {
		this.employeeFirstValue = employeeFirstValue;
	}

	@Column(name = "employer_next_match_value", precision = 10, scale = 2)
	public BigDecimal getEmployerNextMatchValue() {
		return employerNextMatchValue;
	}

	public void setEmployerNextMatchValue(BigDecimal employerNextMatchValue) {
		this.employerNextMatchValue = employerNextMatchValue;
	}

	@Column(name = "employee_next_value", precision = 10, scale = 2)
	public BigDecimal getEmployeeNextValue() {
		return employeeNextValue;
	}

	public void setEmployeeNextValue(BigDecimal employeeNextValue) {
		this.employeeNextValue = employeeNextValue;
	}

	@Column(name = "employer_match_limit", precision = 10, scale = 2)
	public BigDecimal getEmployerMatchLimit() {
		return employerMatchLimit;
	}

	public void setEmployerMatchLimit(BigDecimal employerMatchLimit) {
		this.employerMatchLimit = employerMatchLimit;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "companyDeduction")
	public Set<DeductionCap> getTypedeductionCaps() {
		return this.typedeductionCaps;
	}

	public void setTypedeductionCaps(Set<DeductionCap> typedeductionCaps) {
		this.typedeductionCaps = typedeductionCaps;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "companyDeduction", cascade = CascadeType.ALL)
	public Set<EmployeeDeduction> getEmployeeDeductions() {
		return this.employeeDeductions;
	}

	public void setEmployeeDeductions(Set<EmployeeDeduction> employeeDeductions) {
		this.employeeDeductions = employeeDeductions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "companyDeduction")
	public Set<CompanyPayrollDeduction> getCompanyPayrollDeductions() {
		return this.companyPayrollDeductions;
	}

	public void setCompanyPayrollDeductions(Set<CompanyPayrollDeduction> companyPayrollDeductions) {
		this.companyPayrollDeductions = companyPayrollDeductions;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("CompanyDeduction [id=");
		builder.append(id);
		builder.append(", company=");
		builder.append(company.getId());
		builder.append(", deduction=");
		builder.append(deduction.getId());
		builder.append(", displayName=");
		builder.append(displayName);
		builder.append("]");
		return builder.toString();
	}

}
