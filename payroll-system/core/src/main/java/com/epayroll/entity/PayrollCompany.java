package com.epayroll.entity;

// Generated Dec 22, 2012 3:36:44 AM by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * PayrollCompany generated by hbm2java
 */
@Entity
@Table(name = "payroll_company")
@org.hibernate.annotations.Entity(dynamicInsert = true, dynamicUpdate = true)
public class PayrollCompany implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 4329563122199888091L;
	private Long id;
	private Person person;
	private Address address;
	private String payrollCompanyName;
	private String website;
	private String emailId;
	private String phone;
	private String fax;
	private Status status;
	private Set<FundTransaction> fundTransactions = new HashSet<FundTransaction>(0);

	public enum Status {
		ACTIVE("Active"), INACTIVE("InActive");
		private String name;

		private Status(String name) {
			this.name = name;
		}

		public String getName() {
			return name;
		}
	}

	public PayrollCompany() {
	}

	public PayrollCompany(Person person, Address address) {
		this.person = person;
		this.address = address;
	}

	public PayrollCompany(Person person, Address address, String payrollCompanyName,
			String website, String emailId, String phone, String fax, Status status,
			Set<FundTransaction> fundTransactions) {
		this.person = person;
		this.address = address;
		this.payrollCompanyName = payrollCompanyName;
		this.website = website;
		this.emailId = emailId;
		this.phone = phone;
		this.fax = fax;
		this.setStatus(status);
		this.fundTransactions = fundTransactions;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "person_id")
	public Person getPerson() {
		return this.person;
	}

	public void setPerson(Person person) {
		this.person = person;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "address_id")
	public Address getAddress() {
		return this.address;
	}

	public void setAddress(Address address) {
		this.address = address;
	}

	@Column(name = "payroll_company_name", length = 45)
	public String getPayrollCompanyName() {
		return this.payrollCompanyName;
	}

	public void setPayrollCompanyName(String payrollCompanyName) {
		this.payrollCompanyName = payrollCompanyName;
	}

	@Column(name = "website", length = 45)
	public String getWebsite() {
		return this.website;
	}

	public void setWebsite(String website) {
		this.website = website;
	}

	@Column(name = "email_id", length = 45)
	public String getEmailId() {
		return this.emailId;
	}

	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}

	@Column(name = "phone", length = 45)
	public String getPhone() {
		return this.phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	@Column(name = "fax", length = 45)
	public String getFax() {
		return this.fax;
	}

	public void setFax(String fax) {
		this.fax = fax;
	}

	@Column(name = "status")
	public Status getStatus() {
		return status;
	}

	public void setStatus(Status status) {
		this.status = status;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "payrollCompany")
	public Set<FundTransaction> getCompanyTransactions() {
		return this.fundTransactions;
	}

	public void setCompanyTransactions(Set<FundTransaction> fundTransactions) {
		this.fundTransactions = fundTransactions;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("PayrollCompany [id=");
		builder.append(id);
		builder.append(", person=");
		builder.append(person.getId());
		builder.append(", address=");
		builder.append(address.getId());
		builder.append(", payrollCompanyName=");
		builder.append(payrollCompanyName);
		builder.append(", website=");
		builder.append(website);
		builder.append(", emailId=");
		builder.append(emailId);
		builder.append(", phone=");
		builder.append(phone);
		builder.append(", fax=");
		builder.append(fax);
		builder.append(", status=");
		builder.append(status);
		builder.append("]");
		return builder.toString();
	}

}
