package com.epayroll.entity;

// Generated Dec 22, 2012 3:36:44 AM by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Employee generated by hbm2java
 */
@Entity
@Table(name = "employee")
@org.hibernate.annotations.Entity(dynamicInsert = true, dynamicUpdate = true)
public class Employee implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1693125100518068168L;

	public enum Status {
		ACTIVE("Active"), TERMINATED("Terminated"), INACTIVE("Inactive");
		private String name;

		private Status(String name) {
			this.name = name;
		}

		public String getName() {
			return name;
		}
	}

	public enum Type {
		EMPLOYEE("Employee"), CONTRACTOR("Contractor");
		private String name;

		private Type(String name) {
			this.name = name;
		}

		public String getName() {
			return name;
		}
	}

	public enum Access {
		ENABLED("Enabled"), DISABLED("Disabled");
		private String name;

		private Access(String name) {
			this.name = name;
		}

		public String getName() {
			return name;
		}
	}

	public enum SetupStatus {
		INCOMPLETE("Incomplete"), COMPLETE("Complete");
		private String name;

		private SetupStatus(String name) {
			this.name = name;
		}

		public String getName() {
			return name;
		}
	}

	private Long id;
	private Company company;
	private Person person;
	private CompanyWorkerCompensation companyWorkerCompensation;
	private String employeeId;
	private String workEmail;
	private String workFax;
	private String wrkPhone;
	private String workExt;
	private Access employeeAccess;
	private Type employeeType;
	private String contractorCompanyTin;
	private String contractorCompanyName;
	private Status status;
	private String userName;
	private String password;
	private String securityQuestion;
	private String securityAnswer;
	private Boolean forgetProcessInitiated;
	private SetupStatus setupStatus;
	private Set<EmployeePaySetup> employeePaySetups = new HashSet<EmployeePaySetup>(0);
	private Set<EmployeeDepartmentAllocation> employeeDepartmentAllocations = new HashSet<EmployeeDepartmentAllocation>(
			0);
	private Set<EmploymentHistory> employmentHistories = new HashSet<EmploymentHistory>(0);
	private Set<EmployeeDeduction> employeeDeductions = new HashSet<EmployeeDeduction>(0);
	private Set<EmployeeTax> employeeTaxes = new HashSet<EmployeeTax>(0);
	private Set<EmployeeEarning> employeeEarnings = new HashSet<EmployeeEarning>(0);
	private Set<EmployeeBankAccount> employeeBankAccounts = new HashSet<EmployeeBankAccount>(0);
	private Set<EmployeePayroll> employeePayrolls = new HashSet<EmployeePayroll>(0);
	private Set<Address> addresses = new HashSet<>(0);

	public Employee() {
	}

	public Employee(Company company, Person person, String employeeId,
			CompanyWorkerCompensation companyWorkerCompensation) {
		this.company = company;
		this.person = person;
		this.employeeId = employeeId;
		this.companyWorkerCompensation = companyWorkerCompensation;
	}

	public Employee(Company company, Person person, String employeeId,
			CompanyWorkerCompensation companyWorkerCompensation, String workEmail, String workFax,
			String wrkPhone, String workExt, Access employeeAccess, Type employeeType,
			String contractorCompanyTin, String contractorCompanyName, Status status,
			String userName, String password, String securityQuestion, String securityAnswer,
			Boolean forgetProcessInitiated, Set<EmployeePaySetup> employeePaySetups,
			Set<EmployeeDepartmentAllocation> employeeDepartmentAllocations,
			Set<EmploymentHistory> employmentHistories, Set<EmployeeDeduction> employeeDeductions,
			Set<EmployeeTax> employeeTaxes, Set<EmployeeEarning> employeeEarnings,
			Set<EmployeeBankAccount> employeeBankAccounts, Set<EmployeePayroll> employeePayrolls,
			Set<Address> addresses) {
		this.company = company;
		this.person = person;
		this.employeeId = employeeId;
		this.companyWorkerCompensation = companyWorkerCompensation;
		this.workEmail = workEmail;
		this.workFax = workFax;
		this.wrkPhone = wrkPhone;
		this.workExt = workExt;
		this.employeeAccess = employeeAccess;
		this.employeeType = employeeType;
		this.contractorCompanyTin = contractorCompanyTin;
		this.contractorCompanyName = contractorCompanyName;
		this.status = status;
		this.userName = userName;
		this.password = password;
		this.securityQuestion = securityQuestion;
		this.securityAnswer = securityAnswer;
		this.forgetProcessInitiated = forgetProcessInitiated;
		this.employeePaySetups = employeePaySetups;
		this.employeeDepartmentAllocations = employeeDepartmentAllocations;
		this.employmentHistories = employmentHistories;
		this.employeeDeductions = employeeDeductions;
		this.employeeTaxes = employeeTaxes;
		this.employeeEarnings = employeeEarnings;
		this.employeeBankAccounts = employeeBankAccounts;
		this.employeePayrolls = employeePayrolls;
		this.addresses = addresses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "company_id")
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = "person_id")
	public Person getPerson() {
		return this.person;
	}

	public void setPerson(Person person) {
		this.person = person;
	}

	@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = "company_worker_compensation_id")
	public CompanyWorkerCompensation getCompanyWorkerCompensation() {
		return companyWorkerCompensation;
	}

	public void setCompanyWorkerCompensation(CompanyWorkerCompensation companyWorkerCompensation) {
		this.companyWorkerCompensation = companyWorkerCompensation;
	}

	@Column(name = "employee_id", length = 45)
	public String getEmployeeId() {
		return this.employeeId;
	}

	public void setEmployeeId(String employeeId) {
		this.employeeId = employeeId;
	}

	@Column(name = "work_email", length = 45)
	public String getWorkEmail() {
		return this.workEmail;
	}

	public void setWorkEmail(String workEmail) {
		this.workEmail = workEmail;
	}

	@Column(name = "work_fax", length = 45)
	public String getWorkFax() {
		return this.workFax;
	}

	public void setWorkFax(String workFax) {
		this.workFax = workFax;
	}

	@Column(name = "wrk_phone", length = 45)
	public String getWrkPhone() {
		return this.wrkPhone;
	}

	public void setWrkPhone(String wrkPhone) {
		this.wrkPhone = wrkPhone;
	}

	@Column(name = "work_ext", length = 45)
	public String getWorkExt() {
		return this.workExt;
	}

	public void setWorkExt(String workExt) {
		this.workExt = workExt;
	}

	@Column(name = "employee_access", length = 45)
	public Access getEmployeeAccess() {
		return this.employeeAccess;
	}

	public void setEmployeeAccess(Access employeeAccess) {
		this.employeeAccess = employeeAccess;
	}

	@Column(name = "employee_type", length = 45)
	public Type getEmployeeType() {
		return this.employeeType;
	}

	public void setEmployeeType(Type employeeType) {
		this.employeeType = employeeType;
	}

	@Column(name = "contractor_company_tin", length = 45)
	public String getContractorCompanyTin() {
		return this.contractorCompanyTin;
	}

	public void setContractorCompanyTin(String contractorCompanyTin) {
		this.contractorCompanyTin = contractorCompanyTin;
	}

	@Column(name = "contractor_company_name", length = 45)
	public String getContractorCompanyName() {
		return this.contractorCompanyName;
	}

	public void setContractorCompanyName(String contractorCompanyName) {
		this.contractorCompanyName = contractorCompanyName;
	}

	@Column(name = "status", length = 45)
	public Status getStatus() {
		return status;
	}

	public void setStatus(Status status) {
		this.status = status;
	}

	@Column(name = "user_name", length = 45)
	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	@Column(name = "password", length = 45)
	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "security_question", length = 300)
	public String getSecurityQuestion() {
		return securityQuestion;
	}

	public void setSecurityQuestion(String securityQuestion) {
		this.securityQuestion = securityQuestion;
	}

	@Column(name = "security_answer", length = 100)
	public String getSecurityAnswer() {
		return securityAnswer;
	}

	public void setSecurityAnswer(String securityAnswer) {
		this.securityAnswer = securityAnswer;
	}

	@Column(name = "forget_process_initiated")
	public Boolean getForgetProcessInitiated() {
		return forgetProcessInitiated;
	}

	public void setForgetProcessInitiated(Boolean forgetProcessInitiated) {
		this.forgetProcessInitiated = forgetProcessInitiated;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<EmployeePaySetup> getEmployeePaySetups() {
		return this.employeePaySetups;
	}

	public void setEmployeePaySetups(Set<EmployeePaySetup> employeePaySetups) {
		this.employeePaySetups = employeePaySetups;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<EmployeeDepartmentAllocation> getEmployeeDepartmentAllocations() {
		return this.employeeDepartmentAllocations;
	}

	public void setEmployeeDepartmentAllocations(
			Set<EmployeeDepartmentAllocation> employeeDepartmentAllocations) {
		this.employeeDepartmentAllocations = employeeDepartmentAllocations;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employee", cascade = CascadeType.ALL)
	public Set<EmploymentHistory> getEmploymentHistories() {
		return this.employmentHistories;
	}

	public void setEmploymentHistories(Set<EmploymentHistory> employmentHistories) {
		this.employmentHistories = employmentHistories;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<EmployeeDeduction> getEmployeeDeductions() {
		return this.employeeDeductions;
	}

	public void setEmployeeDeductions(Set<EmployeeDeduction> employeeDeductions) {
		this.employeeDeductions = employeeDeductions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employee", cascade = CascadeType.ALL)
	public Set<EmployeeTax> getEmployeeTaxes() {
		return this.employeeTaxes;
	}

	public void setEmployeeTaxes(Set<EmployeeTax> employeeTaxes) {
		this.employeeTaxes = employeeTaxes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<EmployeeEarning> getEmployeeEarnings() {
		return this.employeeEarnings;
	}

	public void setEmployeeEarnings(Set<EmployeeEarning> employeeEarnings) {
		this.employeeEarnings = employeeEarnings;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<EmployeeBankAccount> getEmployeeBankAccounts() {
		return this.employeeBankAccounts;
	}

	public void setEmployeeBankAccounts(Set<EmployeeBankAccount> employeeBankAccounts) {
		this.employeeBankAccounts = employeeBankAccounts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<EmployeePayroll> getEmployeePayrolls() {
		return this.employeePayrolls;
	}

	public void setEmployeePayrolls(Set<EmployeePayroll> employeePayrolls) {
		this.employeePayrolls = employeePayrolls;
	}

	@OneToMany(cascade = CascadeType.ALL)
	public Set<Address> getAddresses() {
		return addresses;
	}

	public void setAddresses(Set<Address> addresses) {
		this.addresses = addresses;
	}

	@Column(name = "setup_status")
	public SetupStatus getSetupStatus() {
		return setupStatus;
	}

	public void setSetupStatus(SetupStatus setupStatus) {
		this.setupStatus = setupStatus;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Employee [id=");
		builder.append(id);
		builder.append(", company=");
		builder.append(company.getId());
		builder.append(", person=");
		builder.append(person.getId());
		builder.append(", employeeId=");
		builder.append(employeeId);
		builder.append(", companyWorkerCompensation=");
		builder.append(companyWorkerCompensation);
		builder.append(", workEmail=");
		builder.append(workEmail);
		builder.append(", workFax=");
		builder.append(workFax);
		builder.append(", wrkPhone=");
		builder.append(wrkPhone);
		builder.append(", workExt=");
		builder.append(workExt);
		builder.append(", employeeAccess=");
		builder.append(employeeAccess);
		builder.append(", employeeType=");
		builder.append(employeeType);
		builder.append(", contractorCompanyTin=");
		builder.append(contractorCompanyTin);
		builder.append(", contractorCompanyName=");
		builder.append(contractorCompanyName);
		builder.append(", status=");
		builder.append(status);
		builder.append(", userName=");
		builder.append(userName);
		builder.append(", password=");
		builder.append(password);
		builder.append(", securityQuestion=");
		builder.append(securityQuestion);
		builder.append(", securityAnswer=");
		builder.append(securityAnswer);
		builder.append(", setupStatus=");
		builder.append(setupStatus);
		builder.append("]");
		return builder.toString();
	}

}
