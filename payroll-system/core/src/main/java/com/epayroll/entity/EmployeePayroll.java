package com.epayroll.entity;

// Generated Dec 22, 2012 3:36:44 AM by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.epayroll.entity.EmployeePaySetup.PayType;

/**
 * EmployeePayroll generated by hbm2java
 */
@Entity
@Table(name = "employee_payroll")
@org.hibernate.annotations.Entity(dynamicInsert = true, dynamicUpdate = true)
public class EmployeePayroll implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1702341750545264594L;

	private Long id;
	private Employee employee;
	private Payroll payroll;
	private Boolean directDepositStatus;
	private BigDecimal salary;
	private BigDecimal regularHours;
	private BigDecimal hourlyRate;
	private BigDecimal otherHours;
	private BigDecimal grossPay;
	private BigDecimal netDirectDeposit;
	private BigDecimal netCheckAmount;
	private BigDecimal totalDeduction;
	private BigDecimal totalTax;
	private RowType rowType;
	private Status status;
	private PayType payType;
	private Set<EmployeePayrollTax> employeePayrollTaxes = new HashSet<EmployeePayrollTax>(0);
	private Set<EmployeePayrollDeduction> employeePayrollDeductions = new HashSet<EmployeePayrollDeduction>(
			0);
	private Set<CompanyPayrollDeduction> companyPayrollDeductions = new HashSet<CompanyPayrollDeduction>(
			0);
	private Set<CompanyPayrollTax> companyPayrollTaxes = new HashSet<CompanyPayrollTax>(0);
	private Set<EmployeePayrollEarning> employeePayrollEarnings = new HashSet<EmployeePayrollEarning>(
			0);

	public enum Status {
		ACTIVE("Active"), INACTIVE("InActive");
		private String name;

		private Status(String name) {
			this.name = name;
		}

		public String getName() {
			return name;
		}
	}

	public enum RowType {
		MAIN_ROW("Main Row"), ADDITIONAL_CHECK("Additional Check"), ADDITIONAL_ROW("Additional Row");
		private String name;

		private RowType(String name) {
			this.name = name;
		}

		public String getName() {
			return name;
		}
	}

	public EmployeePayroll() {
	}

	public EmployeePayroll(Employee employee, Payroll payroll, BigDecimal grossPay) {
		this.employee = employee;
		this.payroll = payroll;
		this.grossPay = grossPay;
	}

	public EmployeePayroll(BigDecimal salary, BigDecimal hourlyRate, BigDecimal regularHours,
			BigDecimal otherHours, BigDecimal grossPay, BigDecimal netDirectDeposit,
			BigDecimal netCheckAmount, BigDecimal totalDeduction, BigDecimal totalTax,
			RowType rowType) {
		this.salary = salary;
		this.hourlyRate = hourlyRate;
		this.regularHours = regularHours;
		this.otherHours = otherHours;
		this.grossPay = grossPay;
		this.netDirectDeposit = netDirectDeposit;
		this.netCheckAmount = netCheckAmount;
		this.totalDeduction = totalDeduction;
		this.totalTax = totalTax;
		this.rowType = rowType;
	}

	public EmployeePayroll(Employee employee, Payroll payroll, Boolean directDepositStatus,
			BigDecimal salary, BigDecimal hourlyRate, BigDecimal regularHours,
			BigDecimal otherHours, BigDecimal grossPay, BigDecimal netDirectDeposit,
			BigDecimal netCheckAmount, BigDecimal totalDeduction, BigDecimal totalTax,
			RowType rowType, Status status, Set<EmployeePayrollTax> employeePayrollTaxes,
			Set<EmployeePayrollDeduction> employeePayrollDeductions,
			Set<CompanyPayrollDeduction> companyPayrollDeductions,
			Set<CompanyPayrollTax> companyPayrollTaxes,
			Set<EmployeePayrollEarning> employeePayrollEarnings) {
		this.employee = employee;
		this.payroll = payroll;
		this.directDepositStatus = directDepositStatus;
		this.salary = salary;
		this.hourlyRate = hourlyRate;
		this.regularHours = regularHours;
		this.otherHours = otherHours;
		this.grossPay = grossPay;
		this.netDirectDeposit = netDirectDeposit;
		this.netCheckAmount = netCheckAmount;
		this.totalDeduction = totalDeduction;
		this.totalTax = totalTax;
		this.rowType = rowType;
		this.status = status;
		this.employeePayrollTaxes = employeePayrollTaxes;
		this.employeePayrollDeductions = employeePayrollDeductions;
		this.companyPayrollDeductions = companyPayrollDeductions;
		this.companyPayrollTaxes = companyPayrollTaxes;
		this.employeePayrollEarnings = employeePayrollEarnings;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "employee_id")
	public Employee getEmployee() {
		return this.employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "payroll_id")
	public Payroll getPayroll() {
		return this.payroll;
	}

	public void setPayroll(Payroll payroll) {
		this.payroll = payroll;
	}

	@Column(name = "direct_deposit_status", length = 45)
	public Boolean getDirectDepositStatus() {
		return this.directDepositStatus;
	}

	public void setDirectDepositStatus(Boolean directDepositStatus) {
		this.directDepositStatus = directDepositStatus;
	}

	@Column(name = "salary", precision = 10, scale = 2)
	public BigDecimal getSalary() {
		return this.salary;
	}

	public void setSalary(BigDecimal salary) {
		this.salary = salary;
	}

	@Column(name = "hourly_rate", precision = 10, scale = 2)
	public BigDecimal getHourlyRate() {
		return this.hourlyRate;
	}

	public void setHourlyRate(BigDecimal hourlyRate) {
		this.hourlyRate = hourlyRate;
	}

	@Column(name = "regular_hours", precision = 10, scale = 2)
	public BigDecimal getRegularHours() {
		return this.regularHours;
	}

	public void setRegularHours(BigDecimal regularHours) {
		this.regularHours = regularHours;
	}

	@Column(name = "other_hours", precision = 10, scale = 2)
	public BigDecimal getOtherHours() {
		return this.otherHours;
	}

	public void setOtherHours(BigDecimal otherHours) {
		this.otherHours = otherHours;
	}

	@Column(name = "gross_pay", precision = 10, scale = 2)
	public BigDecimal getGrossPay() {
		return this.grossPay;
	}

	public void setGrossPay(BigDecimal grossPay) {
		this.grossPay = grossPay;
	}

	@Column(name = "net_direct_deposit", precision = 10, scale = 2)
	public BigDecimal getNetDirectDeposit() {
		return this.netDirectDeposit;
	}

	public void setNetDirectDeposit(BigDecimal netDirectDeposit) {
		this.netDirectDeposit = netDirectDeposit;
	}

	@Column(name = "net_check_amount", precision = 10, scale = 2)
	public BigDecimal getNetCheckAmount() {
		return this.netCheckAmount;
	}

	public void setNetCheckAmount(BigDecimal netCheckAmount) {
		this.netCheckAmount = netCheckAmount;
	}

	@Column(name = "total_deduction", precision = 10, scale = 2)
	public BigDecimal getTotalDeduction() {
		return this.totalDeduction;
	}

	public void setTotalDeduction(BigDecimal totalDeduction) {
		this.totalDeduction = totalDeduction;
	}

	@Column(name = "total_tax", precision = 10, scale = 2)
	public BigDecimal getTotalTax() {
		return this.totalTax;
	}

	public void setTotalTax(BigDecimal totalTax) {
		this.totalTax = totalTax;
	}

	@Column(name = "row_type")
	public RowType getRowType() {
		return this.rowType;
	}

	public void setRowType(RowType rowType) {
		this.rowType = rowType;
	}

	@Column(name = "status", length = 45)
	public Status getStatus() {
		return this.status;
	}

	public void setStatus(Status status) {
		this.status = status;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeePayroll", cascade = CascadeType.ALL)
	public Set<EmployeePayrollTax> getEmployeePayrollTaxes() {
		return this.employeePayrollTaxes;
	}

	public void setEmployeePayrollTaxes(Set<EmployeePayrollTax> employeePayrollTaxes) {
		this.employeePayrollTaxes = employeePayrollTaxes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeePayroll", cascade = CascadeType.ALL)
	public Set<EmployeePayrollDeduction> getEmployeePayrollDeductions() {
		return this.employeePayrollDeductions;
	}

	public void setEmployeePayrollDeductions(Set<EmployeePayrollDeduction> employeePayrollDeductions) {
		this.employeePayrollDeductions = employeePayrollDeductions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeePayroll", cascade = CascadeType.ALL)
	public Set<CompanyPayrollDeduction> getCompanyPayrollDeductions() {
		return this.companyPayrollDeductions;
	}

	public void setCompanyPayrollDeductions(Set<CompanyPayrollDeduction> companyPayrollDeductions) {
		this.companyPayrollDeductions = companyPayrollDeductions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeePayroll", cascade = CascadeType.ALL)
	public Set<CompanyPayrollTax> getCompanyPayrollTaxes() {
		return this.companyPayrollTaxes;
	}

	public void setCompanyPayrollTaxes(Set<CompanyPayrollTax> companyPayrollTaxes) {
		this.companyPayrollTaxes = companyPayrollTaxes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeePayroll", cascade = CascadeType.ALL)
	public Set<EmployeePayrollEarning> getEmployeePayrollEarnings() {
		return this.employeePayrollEarnings;
	}

	public void setEmployeePayrollEarnings(Set<EmployeePayrollEarning> employeePayrollEarnings) {
		this.employeePayrollEarnings = employeePayrollEarnings;
	}

	public PayType getPayType() {
		return payType;
	}

	public void setPayType(PayType payType) {
		this.payType = payType;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("EmployeePayroll [id=");
		builder.append(id);
		if (employee != null) {
			builder.append(", employee=");
			builder.append(employee.getId());
		}
		if (payroll != null) {
			builder.append(", payroll=");
			builder.append(payroll.getId());
		}
		builder.append(", directDepositStatus=");
		builder.append(directDepositStatus);
		builder.append(", salary=");
		builder.append(salary);
		builder.append(", hourlyRate=");
		builder.append(hourlyRate);
		builder.append(", regularHours=");
		builder.append(regularHours);
		builder.append(", otherHours=");
		builder.append(otherHours);
		builder.append(", grossPay=");
		builder.append(grossPay);
		builder.append(", netDirectDeposit=");
		builder.append(netDirectDeposit);
		builder.append(", netCheckAmount=");
		builder.append(netCheckAmount);
		builder.append(", totalDeduction=");
		builder.append(totalDeduction);
		builder.append(", totalTax=");
		builder.append(totalTax);
		builder.append(", rowType=");
		builder.append(rowType);
		builder.append(", status=");
		builder.append(status);
		builder.append("]");
		return builder.toString();
	}

}
