package com.epayroll.entity;

// Generated Dec 22, 2012 3:36:44 AM by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * EmployeeTax generated by hbm2java
 */
@Entity
@Table(name = "employee_tax")
@org.hibernate.annotations.Entity(dynamicInsert = true, dynamicUpdate = true)
public class EmployeeTax implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1041641064505372515L;

	private Long id;
	private Employee employee;
	private TaxType taxType;
	private Status status;
	private Boolean exempted;
	private Date asOnDate;
	private Set<EmployeePayrollTax> employeePayrollTaxes = new HashSet<EmployeePayrollTax>(0);
	private Set<EmployeeW4Detail> employeeW4Details = new HashSet<EmployeeW4Detail>();

	public enum Status {
		ACTIVE("Active"), INACTIVE("InActive");
		private String name;

		private Status(String name) {
			this.name = name;
		}

		public String getName() {
			return name;
		}
	}

	public EmployeeTax() {
	}

	public EmployeeTax(Employee employee, TaxType taxType) {
		this.employee = employee;
		this.taxType = taxType;
	}

	public EmployeeTax(Employee employee, TaxType taxType, Status status, Boolean exempted,
			Date asOnDate, Set<EmployeePayrollTax> employeePayrollTaxes,
			Set<EmployeeW4Detail> employeeW4Details) {
		super();
		this.employee = employee;
		this.taxType = taxType;
		this.status = status;
		this.exempted = exempted;
		this.asOnDate = asOnDate;
		this.employeePayrollTaxes = employeePayrollTaxes;
		this.setEmployeeW4Details(employeeW4Details);
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "employee_id")
	public Employee getEmployee() {
		return this.employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "tax_type_id")
	public TaxType getTaxType() {
		return this.taxType;
	}

	public void setTaxType(TaxType taxType) {
		this.taxType = taxType;
	}

	@Column(name = "status", length = 45)
	public Status getStatus() {
		return this.status;
	}

	public void setStatus(Status status) {
		this.status = status;
	}

	@Column(name = "exempted", length = 45)
	public Boolean getExempted() {
		return this.exempted;
	}

	public void setExempted(Boolean exempted) {
		this.exempted = exempted;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "as_on_date", length = 19)
	public Date getAsOnDate() {
		return this.asOnDate;
	}

	public void setAsOnDate(Date asOnDate) {
		this.asOnDate = asOnDate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeeTax")
	public Set<EmployeePayrollTax> getEmployeePayrollTaxes() {
		return this.employeePayrollTaxes;
	}

	public void setEmployeePayrollTaxes(Set<EmployeePayrollTax> employeePayrollTaxes) {
		this.employeePayrollTaxes = employeePayrollTaxes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeeTax", cascade = CascadeType.ALL)
	public Set<EmployeeW4Detail> getEmployeeW4Details() {
		return employeeW4Details;
	}

	public void setEmployeeW4Details(Set<EmployeeW4Detail> employeeW4Details) {
		this.employeeW4Details = employeeW4Details;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("EmployeeTax [id=");
		builder.append(id);
		builder.append(", employee=");
		builder.append(employee.getId());
		builder.append(", taxType=");
		builder.append(taxType.getId());
		builder.append(", status=");
		builder.append(status);
		builder.append(", exempted=");
		builder.append(exempted);
		builder.append(", asOnDate=");
		builder.append(asOnDate);
		builder.append("]");
		return builder.toString();
	}

}
