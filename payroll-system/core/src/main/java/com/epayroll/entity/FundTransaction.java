package com.epayroll.entity;

// Generated Dec 22, 2012 3:36:44 AM by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.math.BigDecimal;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * FundTransaction generated by hbm2java
 */
@Entity
@Table(name = "fund_transaction")
@org.hibernate.annotations.Entity(dynamicInsert = true, dynamicUpdate = true)
public class FundTransaction implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -7543603015826152276L;
	private Long id;
	private EmployeePayroll employeePayroll;
	private Payroll payroll;
	private TransactionBody transactionBody;
	private Company company;
	private PayrollCompany payrollCompany;
	private PaymentMode paymentMode;
	private String referenceNumber;
	private TransactionStatus transactionStatus;
	private TransactionType transactionType;
	private BigDecimal amount;
	private FundCategory fundCategory;
	private Date dateOfTransaction;
	private CheckStatus checkStatus;
	private Date checkVoidDate;
	private Date checkClearingDate;

	public enum TransactionStatus {
		SUCCESS("Success"), DECLINED("Declined"), FAILED("Failed");
		private String name;

		private TransactionStatus(String name) {
			this.name = name;
		}

		public String getName() {
			return name;
		}
	}

	public enum TransactionType {
		DEBIT("Debit"), CREDIT("Credit");
		private String name;

		private TransactionType(String name) {
			this.name = name;
		}

		public String getName() {
			return name;
		}
	}

	public enum CheckStatus {
		WRITTEN("Written"), VOID("Void"), CLEARED("Cleared"), BOUNCED("Bounced");
		private String name;

		private CheckStatus(String name) {
			this.name = name;
		}

		public String getName() {
			return name;
		}
	}

	public FundTransaction() {
	}

	public FundTransaction(EmployeePayroll employeePayroll, Payroll payroll,
			TransactionBody transactionBody, Company company, PayrollCompany payrollCompany,
			PaymentMode paymentMode, String referenceNumber, TransactionStatus transactionStatus,
			TransactionType transactionType, BigDecimal amount, FundCategory fundCategory,
			Date dateOfTransaction, CheckStatus checkStatus, Date checkVoidDate,
			Date checkClearingDate) {
		super();
		this.employeePayroll = employeePayroll;
		this.payroll = payroll;
		this.transactionBody = transactionBody;
		this.company = company;
		this.payrollCompany = payrollCompany;
		this.paymentMode = paymentMode;
		this.referenceNumber = referenceNumber;
		this.transactionStatus = transactionStatus;
		this.transactionType = transactionType;
		this.amount = amount;
		this.fundCategory = fundCategory;
		this.dateOfTransaction = dateOfTransaction;
		this.checkStatus = checkStatus;
		this.checkVoidDate = checkVoidDate;
		this.checkClearingDate = checkClearingDate;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "employee_payroll_id")
	public EmployeePayroll getEmployeePayroll() {
		return employeePayroll;
	}

	public void setEmployeePayroll(EmployeePayroll employeePayroll) {
		this.employeePayroll = employeePayroll;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "transaction_body_id")
	public TransactionBody getTransactionBody() {
		return transactionBody;
	}

	public void setTransactionBody(TransactionBody transactionBody) {
		this.transactionBody = transactionBody;
	}

	@Column(name = "reference_number", length = 30)
	public String getReferenceNumber() {
		return referenceNumber;
	}

	public void setReferenceNumber(String referenceNumber) {
		this.referenceNumber = referenceNumber;
	}

	@Column(name = "transaction_status")
	public TransactionStatus getTransactionStatus() {
		return transactionStatus;
	}

	public void setTransactionStatus(TransactionStatus transactionStatus) {
		this.transactionStatus = transactionStatus;
	}

	@Column(name = "amount", precision = 10, scale = 2)
	public BigDecimal getAmount() {
		return amount;
	}

	public void setAmount(BigDecimal amount) {
		this.amount = amount;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_of_transaction", length = 19)
	public Date getDateOfTransaction() {
		return dateOfTransaction;
	}

	public void setDateOfTransaction(Date dateOfTransaction) {
		this.dateOfTransaction = dateOfTransaction;
	}

	@Column(name = "check_status")
	public CheckStatus getCheckStatus() {
		return checkStatus;
	}

	public void setCheckStatus(CheckStatus checkStatus) {
		this.checkStatus = checkStatus;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "check_void_date", length = 19)
	public Date getCheckVoidDate() {
		return checkVoidDate;
	}

	public void setCheckVoidDate(Date checkVoidDate) {
		this.checkVoidDate = checkVoidDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "check_clearing_date", length = 19)
	public Date getCheckClearingDate() {
		return checkClearingDate;
	}

	public void setCheckClearingDate(Date checkClearingDate) {
		this.checkClearingDate = checkClearingDate;
	}

	@Column(name = "transaction_type")
	public TransactionType getTransactionType() {
		return this.transactionType;
	}

	public void setTransactionType(TransactionType transactionType) {
		this.transactionType = transactionType;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "payroll_company_id")
	public PayrollCompany getPayrollCompany() {
		return this.payrollCompany;
	}

	public void setPayrollCompany(PayrollCompany payrollCompany) {
		this.payrollCompany = payrollCompany;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "payment_mode_id")
	public PaymentMode getPaymentMode() {
		return this.paymentMode;
	}

	public void setPaymentMode(PaymentMode paymentMode) {
		this.paymentMode = paymentMode;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "payroll_id")
	public Payroll getPayroll() {
		return this.payroll;
	}

	public void setPayroll(Payroll payroll) {
		this.payroll = payroll;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "fund_category_id")
	public FundCategory getFundCategory() {
		return this.fundCategory;
	}

	public void setFundCategory(FundCategory fundCategory) {
		this.fundCategory = fundCategory;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "company_id")
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("FundTransaction [id=");
		builder.append(id);
		builder.append(", employeePayroll=");
		builder.append(employeePayroll);
		builder.append(", payroll=");
		builder.append(payroll);
		builder.append(", transactionBody=");
		builder.append(transactionBody.getId());
		builder.append(", company=");
		builder.append(company);
		builder.append(", payrollCompany=");
		builder.append(payrollCompany);
		builder.append(", paymentMode=");
		builder.append(paymentMode.getId());
		builder.append(", referenceNumber=");
		builder.append(referenceNumber);
		builder.append(", transactionStatus=");
		builder.append(transactionStatus);
		builder.append(", transactionType=");
		builder.append(transactionType);
		builder.append(", amount=");
		builder.append(amount);
		builder.append(", fundCategory=");
		builder.append(fundCategory.getId());
		builder.append(", dateOfTransaction=");
		builder.append(dateOfTransaction);
		builder.append(", checkStatus=");
		builder.append(checkStatus);
		builder.append(", checkVoidDate=");
		builder.append(checkVoidDate);
		builder.append(", checkClearingDate=");
		builder.append(checkClearingDate);
		builder.append("]");
		return builder.toString();
	}

}
